name: Build and upload to PyPI
# https://github.com/pypa/cibuildwheel/blob/main/examples/github-deploy.yml

# Build on every branch push, tag push, and pull request change:
#on: [push, pull_request]
# Alternatively, to publish when a (published) GitHub Release is created, use the following:
on: [push, pull_request, release]

# Best comparable example: https://github.com/pdfo/pdfo

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13, macos-14]

    steps:
      - name: Setup GNU Fortran
        if: false == contains( matrix.os, 'windows')
        uses: awvwgk/setup-fortran@v1

      - name: Install compiler
        if: false == contains( matrix.os, 'windows')
        id: install_cc
        uses: rlalik/setup-cpp-compiler@master
        with:
          compiler: clang
          
      - name: Install mingw-w64 on Windows
        if: contains( matrix.os, 'windows')
        uses: msys2/setup-msys2@v2
        with:
          path-type: inherit
          install: |
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-gcc-fortran
            
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build wheels mac and linux
        if: false == contains( matrix.os, 'windows')
        uses: pypa/cibuildwheel@v2.17.0
        env:
          CC: ${{ steps.install_cc.outputs.cc }}
          CXX: ${{ steps.install_cc.outputs.cxx }}
          #CIBW_BUILD: cp${{ matrix.python }}-${{ matrix.platform }}
          CIBW_SKIP: pp* cp36-* cp37-* cp38-* *-musllinux* *-win32 *-win_arm64
          #CIBW_BUILD_FRONTEND: "pip; args: --no-build-isolation"
          CIBW_BUILD_FRONTEND: "build; args: -w -n -x"
          CIBW_BEFORE_BUILD: pip install numpy ninja meson meson-python

      - name: Build wheels windows
        if: contains( matrix.os, 'windows')
        uses: pypa/cibuildwheel@v2.17.0
        env:
          #CIBW_BUILD: cp${{ matrix.python }}-${{ matrix.platform }}
          CIBW_SKIP: pp* cp36-* cp37-* cp38-* *-musllinux* *-win32 *-win_arm64
          #CIBW_BUILD_FRONTEND: "pip; args: --no-build-isolation"
          CIBW_BUILD_FRONTEND: "build; args: -w -n -x"
          CIBW_BEFORE_BUILD: pip install numpy ninja meson meson-python
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: "bash .github/tools/cibw_repair_wheel_command_windows.sh {wheel} {dest_dir}"
          
      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl
          
  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-sdist
          path: dist/*.tar.gz

  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    # upload to PyPI on every tag starting with 'v'
    #if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    # alternatively, to publish when a GitHub Release is created, use the following rule:
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v4
        with:
          # unpacks all CIBW artifacts into dist/
          pattern: cibw-*
          path: dist
          merge-multiple: true

      - name: Upload to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        #with:
        #  user: __token__
        #  password: ${{ secrets.pypi_password }}
        #  # To test: repository_url: https://test.pypi.org/legacy/
